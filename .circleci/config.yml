version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export ENZOTEST_DIR=$HOME/enzo_test' >> $BASH_ENV
            echo 'export ANSWER_NAME="push_suite"' >> $BASH_ENV
            echo 'export HYPRE=2.20.0' >> $BASH_ENV
            source $BASH_ENV
            # get tags from the main and PR repository (for the current gold standard)
            git fetch --tags https://github.com/enzo-project/enzo-dev
            if [ -n "$CIRCLE_PR_REPONAME" ]; then
              git fetch --tags https://github.com/$CIRCLE_PR_USERNAME/$CIRCLE_PR_REPONAME
            fi
            # tag the tip so we can go back to it
            git tag tip

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            source $BASH_ENV
            sudo apt-get update
            sudo apt-get install -y csh libhdf5-serial-dev libopenmpi-dev openmpi-bin gfortran libtool-bin xutils-dev
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy h5py fastcache flake8 nose girder-client matplotlib pytest gitpython # yt
            # Temporary workaround to use updated answer testing from the yt dev repository
            # instead of pip until next yt point release
            git clone https://github.com/yt-project/yt
            cd yt
            git checkout main
            pip install -e .
            cd ..
            pip install yt_astro_analysis
            # Install hypre
            mkdir -p $HOME/local
            if [ ! -f $HOME/local/lib/libHYPRE.a ]; then
              cd $HOME
              wget https://github.com/hypre-space/hypre/archive/refs/tags/v${HYPRE}.tar.gz
              tar xvfz v${HYPRE}.tar.gz
              cd hypre-${HYPRE}/src
              ./configure --with-MPI --with-MPI-include=/usr/include/mpi --with-MPI-libs=mpi --with-MPI-lib-dirs=/usr/lib --prefix=$HOME/local
              make install
            fi

  install-grackle:
    description: "Install grackle."
    steps:
      - run:
          name: "Install grackle."
          command: |
            git clone -b main https://github.com/grackle-project/grackle $HOME/grackle
            cd $HOME/grackle
            ./configure
            cd src/clib
            make machine-linux-gnu
            make
            make install

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            sudo apt-get update
            sudo apt-get install -y dvipng texlive-latex-extra
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            girder-cli --api-url https://girder.hub.yt/api/v1 download 5af9ef42ec1bd30001fcd001 $HOME/enzo-dev/run/CosmologySimulation

  build-and-test:
    description: "Compile enzo and run tests."
    parameters:
      tag:
        type: string
        default: tip
      skipfile:
        type: string
        default: ""
      flags:
        type: string
        default: ""
    steps:
      - run:
          name: "Compile enzo and run tests."
          no_output_timeout: 20m
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            if [ ! -e << parameters.skipfile >> ]; then
              git checkout << parameters.tag >>
              ./configure
              cd src/enzo
              make machine-ubuntu
              make load-config-test-suite
              make clean
              make -j 6
              cd ../../run
              python ./test_runner.py --suite=push -o $ENZOTEST_DIR --answer-name=$ANSWER_NAME --local --machine=local_nompi --strict=high --verbose --jrun=4 << parameters.flags >>
            fi

  compile-test:
    description: "Test that enzo compiles in a few different configurations."
    steps:
      - run:
          name: "Test compilation configurations."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            ./configure
            cd src/enzo
            make machine-ubuntu
            # test various baryon/particle precisions
            for prec in 32 64
            do for part in 32 128
            do
            # skip the test-suite configuration
            if [[ $prec == 64 && $part == 64 ]]; then
            continue
            fi
            make precision-$prec
            make particles-$part
            make clean
            make -j 6 || (make show-config ; exit 1)
            done ; done
            # return this to default
            make precision-64
            make particles-64
            # test various integer/particle-id precisions
            for inte in 64
            do for pids in 64
            do
            # skip the test-suite configuration
            if [[ $inte == 32 && $pids == 32 ]]; then
            continue
            fi
            make integers-$inte
            make particle-id-$pids
            make clean
            make -j 6 || (make show-config ; exit 1)
            done ; done
            make integers-64
            make particle-id-64
            # test without mpi
            make use-mpi-no
            make clean
            make -j 6 || (make show-config ; exit 1)
            make use-mpi-yes
            # test ray-tracing
            make photon-no
            make clean
            make -j 6 || (make show-config ; exit 1)

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/manual/source
            python -m sphinx -M html "." "_build" -W

jobs:
  test-suite:
    docker:
      - image: cimg/python:3.8.5

    resource_class: large
    working_directory: ~/enzo-dev

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-v3

      - install-dependencies

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-v3
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/local

      - install-grackle
      - download-test-data

      - restore_cache:
          name: "Restore test answers."
          key: test-answers-v15a

      - build-and-test:
          tag: gold-standard-v15
          skipfile: ~/enzo_test/push_suite
          flags: --answer-store

      - save_cache:
          name: "Save test answers cache."
          key: test-answers-v15a
          paths:
            - ~/enzo_test/push_suite

      - build-and-test:
          tag: tip
          skipfile: notafile
          flags: --clobber

  test-compile-options:
    docker:
      - image: cimg/python:3.8.5

    resource_class: large
    working_directory: ~/enzo-dev

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-v3

      - install-dependencies

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-v3
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/local

      - install-grackle
      - compile-test

      - store_artifacts:
          path: ~/enzo-dev/src/enzo/out.compile

  docs-build:
    docker:
      - image: cimg/python:3.8.5

    working_directory: ~/enzo-dev

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   version: 2

   tests:
     jobs:
       - test-compile-options
       - test-suite
       - docs-build

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 1"
           filters:
            branches:
              only:
                - master

     jobs:
       - test-compile-options
       - test-suite
       - docs-build
