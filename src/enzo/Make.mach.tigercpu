#=======================================================================
#
# FILE:        Make.mach.tigercpu
#
# DESCRIPTION: Makefile settings for tigercpu at Princeton
#
# AUTHOR:      He Jia (hejia@princeton.edu)
#
# DATE:        2020-08-31
#
#=======================================================================

MACH_FILE  = Make.mach.tigercpu
MACH_TEXT  = tigercpu
MACH_VALID = 1

#       please load these modules:
#               module load intel/19.1/64/19.1.1.217 openmpi/intel-19.0/3.1.3/64 hdf5/intel-16.0/1.8.16 anaconda/2019.10
#       then in a conda env, please do:
#               conda install yt mercurial -c conda-forge
#               conda install python-hglib -c mforbes 
#       building:
#               ./configure 
#               cd src/enzo
#               make machine-tigercpu
#               gmake opt-high papi-no #grackle-yes
#               make show-config
#               make
#               cd ../inits/
#               make
#               cd ../ring/
#               make

#-----------------------------------------------------------------------
# Install paths (local variables)
#-----------------------------------------------------------------------

LOCAL_COMPILER = ${PROD_DIR}/compiler
LOCAL_MPI_INSTALL = ${MPI_HOME}
LOCAL_HDF5_INSTALL = ${HDF5DIR}
LOCAL_HYPRE_INSTALL = 
LOCAL_PAPI_INSTALL = 
LOCAL_PYTHON_INSTALL = #${CONDA_PREFIX}
LOCAL_GRACKLE_INSTALL = #${HOME}/grackle-build

#-----------------------------------------------------------------------
# Compiler settings
#-----------------------------------------------------------------------

MACH_CPP       = cpp # C preprocessor command
MACH_CUDACOMPILER	= # CUDA compiler

# With MPI

MACH_CC_MPI    = mpicc # C compiler when using MPI
MACH_CXX_MPI   = mpicxx # C++ compiler when using MPI
MACH_FC_MPI    = ifort # Fortran 77 compiler when using MPI
MACH_F90_MPI   = ifort # Fortran 90 compiler when using MPI
MACH_LD_MPI    = mpicxx # Linker when using MPI

# Without MPI

MACH_CC_NOMPI  = icc # C compiler when not using MPI
MACH_CXX_NOMPI = icpc # C++ compiler when not using MPI
MACH_FC_NOMPI  = ifort # Fortran 77 compiler when not using MPI
MACH_F90_NOMPI = ifort # Fortran 90 compiler when not using MPI
MACH_LD_NOMPI  = icpc # Linker when not using MPI

#-----------------------------------------------------------------------
# Machine-dependent defines
#-----------------------------------------------------------------------

# Defines for the architecture; e.g. -DSUN, -DLINUX, etc.
# Note: When compiling against HDF5 version 1.8 or greater, you need to
# compile HDF5 with --with-default-api-version=v16, or Enzo with
# -DH5_USE_16_API.

MACH_DEFINES   = -DLINUX -DH5_USE_16_API

#-----------------------------------------------------------------------
# Compiler flag settings
#-----------------------------------------------------------------------

MACH_CPPFLAGS = -P -traditional # C preprocessor flags
MACH_CFLAGS   = # C compiler flags
MACH_CXXFLAGS = # C++ compiler flags
MACH_FFLAGS   = -132 # Fortran 77 compiler flags
MACH_F90FLAGS = # Fortran 90 compiler flags
MACH_LDFLAGS  = # Linker flags
#MACH_OPENMP   = -mp
#MACH_OPENMP   = -openmp

#-----------------------------------------------------------------------
# Precision-related flags
#-----------------------------------------------------------------------

MACH_FFLAGS_INTEGER_32 = -i4
MACH_FFLAGS_INTEGER_64 = -i8
MACH_FFLAGS_REAL_32    = -r4
MACH_FFLAGS_REAL_64    = -r8

#-----------------------------------------------------------------------
# Optimization flags
#-----------------------------------------------------------------------

MACH_OPT_WARN        = -Wall -g # Flags for verbose compiler warnings
MACH_OPT_DEBUG       = -O0 -g # Flags for debugging
MACH_OPT_HIGH        = -O2 -g -march=native # Flags for high conservative optimization
MACH_OPT_AGGRESSIVE  = -O3 -march=native # Flags for aggressive optimization

#-----------------------------------------------------------------------
# Includes
#-----------------------------------------------------------------------

LOCAL_INCLUDES_MPI    = -I$(LOCAL_MPI_INSTALL)/include
LOCAL_INCLUDES_HDF5   = -I$(LOCAL_HDF5_INSTALL)/include
LOCAL_INCLUDES_HYPRE  = 
LOCAL_INCLUDES_PAPI   = 
LOCAL_INCLUDES_PYTHON = 
LOCAL_INCLUDES_GRACKLE = #-I$(LOCAL_GRACKLE_INSTALL)/include

MACH_INCLUDES         = $(LOCAL_INCLUDES_HDF5)
MACH_INCLUDES_MPI     = $(LOCAL_INCLUDES_MPI)
MACH_INCLUDES_HYPRE   = $(LOCAL_INCLUDES_HYPRE)
MACH_INCLUDES_PAPI    = $(LOCAL_INCLUDES_PAPI)
MACH_INCLUDES_PYTHON  = $(LOCAL_INCLUDES_PYTHON)
MACH_INCLUDES_GRACKLE = $(LOCAL_INCLUDES_GRACKLE)

#-----------------------------------------------------------------------
# Libraries
#-----------------------------------------------------------------------

LOCAL_LIBS_MACH	= -L$(LOCAL_COMPILER)/lib/intel64 -lcilkrts -lifcore -lifport # Machine-dependent libraries
LOCAL_LIBS_MPI    = -L/usr/local/openmpi/3.1.3/intel190/x86_64/lib64 -L/usr/local/intel/lib64/openmpi
LOCAL_LIBS_HDF5   = -L$(LOCAL_HDF5_INSTALL)/lib64 -lhdf5 -lz 
LOCAL_LIBS_HYPRE  = 
LOCAL_LIBS_PAPI   = 
LOCAL_LIBS_PYTHON  = 
LOCAL_LIBS_GRACKLE = #-L$(LOCAL_GRACKLE_INSTALL)/lib -lgrackle

MACH_LIBS         = $(LOCAL_LIBS_HDF5) $(LOCAL_LIBS_MACH)
MACH_LIBS_MPI     = $(LOCAL_LIBS_MPI)
MACH_LIBS_HYPRE   = $(LOCAL_LIBS_HYPRE)
MACH_LIBS_PAPI    = $(LOCAL_LIBS_PAPI)
MACH_LIBS_PYTHON  = $(LOCAL_LIBS_PYTHON)
MACH_LIBS_GRACKLE = $(LOCAL_LIBS_GRACKLE)
